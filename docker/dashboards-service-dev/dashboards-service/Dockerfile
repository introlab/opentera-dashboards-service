# Must be ubuntu, since opentera-webrtc requires ubuntu to download pre-compiled binaries
FROM ubuntu:22.04
# Change default shell to bash
SHELL ["/bin/bash", "--login", "-c"]

# Install build dependencies
RUN apt update && DEBIAN_FRONTEND=noninteractive apt install -y \
	build-essential git sudo vim libprotobuf-dev protobuf-compiler locales wget curl cmake

# Set system locale
RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
    locale-gen
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

WORKDIR /

# Install miniconda
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
RUN bash ./Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/miniconda3

# Copy requirements file (does not change often)
ADD ./requirements.txt requirements.txt


# Install latest npm / nodejs
RUN curl -sL https://deb.nodesource.com/setup_18.x -o nodesource_setup.sh
RUN bash nodesource_setup.sh
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y nodejs

# Create conda venv in local directory outside of sources
RUN $HOME/miniconda3/bin/conda install -m -c conda-forge -y --copy -n myenv python=3.11
RUN $HOME/miniconda3/bin/conda init bash

# Make RUN commands use the new environment:
SHELL ["/root/miniconda3/bin/conda", "run", "-n", "myenv", "/bin/bash", "-c"]

# NOTE: Next run commands will have bash + conda + venv initialized properly
# Debug, print python version and path
RUN python3 --version
RUN which python3

# Install Python dependencies
RUN python3 -m pip install -r requirements.txt
RUN python3 -m pip install debugpy

## RUN Service
WORKDIR /dashboards-service

ENV PYTHONPATH /dashboards-service
ENV PYTHON3_EXEC /root/miniconda3/envs/myenv/bin/python3

# Will keep the container running and update translations.
CMD ["/bin/sh", "-c", "trap exit 1 INT; while true; do sleep 1; done"]
#CMD ["/bin/sh", "-c", "./docker_dev_setup.sh; $PYTHON3_EXEC ./setup/setup_dashboards_service_run_once.py; trap exit 1 INT; while true; do sleep 1; done"]

# This will update the translation and run the service in debug mode
#CMD ["/bin/bash", "-c", "./docker_dev_setup.sh; $PYTHON3_EXEC ./setup_omr_service_run_once.py; $PYTHON3_EXEC -m debugpy --listen 0.0.0.0:5689 OMRService.py"]
